/*
*******************************************************************************
* Smoothing_test.cc:
* unit test for path smoothing
*
* by Hu.ZH(CrossOcean.ai)
*******************************************************************************
*/

#include "../include/PathSmoothing.h"

int main() {
  ASV::planning::SmootherConfig smoothconfig{
      1,
  };

  ASV::planning::PathSmoothing pathsmoother(smoothconfig);

  // std::vector<std::tuple<double, double, double, bool>> coarse_path = {
  //     {30, 7, 0, true},
  //     {30.9851, 7.14888, 0.3, true},
  //     {31.8821, 7.58221, 0.6, true},
  //     {32.6111, 8.2613, 0.9, true},
  //     {33.1068, 9.12547, 1.2, true},
  //     {33.325, 10.0975, 1.5, true},
  //     {33.2462, 11.0907, 1.8, true},
  //     {32.8774, 12.0162, 2.1, true},
  //     {32.2515, 12.7913, 2.4, true},
  //     {31.4246, 13.3469, 2.7, true},
  //     {30.4704, 13.6333, 3.0, true},
  //     {29.4742, 13.6249, -2.98319, true},
  //     {28.5249, 13.3225, -2.68319, true},
  //     {27.7074, 12.7531, -2.38319, true},
  //     {28.5249, 11.9675, -2.08319, true},
  //     {25.6646, 10.6125, -2.68319, true},
  //     {24.7153, 10.3101, -2.98319, true},
  //     {24.7153, 10.3101, -2.98319, true},
  //     {24.2293, 10.1946, -2.83319, true},
  //     {23.7661, 10.0077, -2.68319, true},
  //     {23.3359, 9.75374, -2.53319, true},
  //     {22.9486, 9.43832, -2.38319, true},
  //     {22.6127, 9.06855, -2.23319, true},
  //     {22.3359, 8.65274, -2.08319, true},
  //     {22.1243, 8.20024, -1.93319, true},
  //     {21.9827, 7.72119, -1.78319, true},
  //     {21.9096, 7.22683, -1.68618, true},
  //     {21.8521, 6.73015, -1.68618, true},
  //     {21.7945, 6.23348, -1.68618, true},
  //     {21.7369, 5.7368, -1.68618, true},
  //     {21.6794, 5.24013, -1.68618, true},
  //     {21.6218, 4.74375, -1.68618, true},
  //     {21.5642, 4.24678, -1.68618, true},
  //     {21.5094, 3.74982, -1.68618, true},
  //     {21.5, 3.5, -1.64581, true},
  // };

  std::vector<std::tuple<double, double, double, bool>> coarse_path = {
      {30, 7, 0, true},
      {29, 7, 8.7e-8, true},
      {29, 7, 8.7e-8, false},
      {28, 7, 8.7e-8, false},
      {27, 7, 8.7e-8, false},
      {26, 7, 8.7e-8, false},
      {25, 7, 8.7e-8, false},
      {24.5019, 6.96257, 0.15, false},
      {24.0149, 6.85112, 0.3, false},
      {23.5501, 6.66816, 0.45, false},
      {23.1179, 6.41779, 0.60, false},
      {23.7279, 6.10563, 0.75, false},
      {22.3889, 5.7387, 0.90, false},
      {22.1086, 5.32524, 1.05, false},
      {21.8932, 4.87453, 1.2, false},
      {21.7476, 4.39669, 1.35, false},
      {21.675, 3.90246, 1.49402, false},
      {21.6366, 3.40393, 1.49402, false},
      {21.5983, 2.90541, 1.49402, false},
      {21.5599, 2.40688, 1.49402, false},
      {21.5216, 1.90835, 1.49402, false},
      {21.5, 1.5, 1.5708, false},

  };
  auto p_coarse = pathsmoother.SetupCoarsePath(coarse_path).coarse_path();

  for (const auto &value : p_coarse) {
    std::cout << std::get<0>(value).x() << ", " << std::get<0>(value).y()
              << ", " << std::get<1>(value) << std::endl;
  }
}